upstream was {
    ip_hash;
    server [{ip}]:[{port}];
}

# http settings & certbot web root settings
server {
         listen [::]:80;
         listen 80;

         # nginx connection host configuration
         server_name [{domain.com}] [{www.domain.com}];

         location ~ /.well-known/acme-challenge {
             allow all;
             root /var/www/certbot;
         }

         # http to https redirect config. Comment processing during initial setting.
         location / {
             return 301 https://$host$request_uri;
         }
}

include /etc/letsencrypt/options-ssl-nginx.conf;
ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

# Setting up registration of ssl authentication key generated by certbot.
server {

    listen 443 ssl;
    # The location of the ssl pem key issued by certbot.
    ssl_certificate /etc/letsencrypt/archive/[{domain.com}]/fullchain1.pem;
    ssl_certificate_key /etc/letsencrypt/archive/[{domain.com}]/privkey1.pem;

    server_name [{domain.com}] [{domain.com}];


    ssl_session_cache    shared:SSL:1m;
    ssl_session_timeout  20m;
    # Specifies the SSL-TLS version to use.
    ssl_protocols TLSv1.2 TLSv1.3;
    # Specifies the encryption algorithm to use in the SSL authentication method.
    # Apply general-purpose algorithms.
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-DSS-AES128-SHA256:DHE-DSS-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA:AES256-SHA:AES:CAMELLIA:!DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!DHE-RSA-AES128-GCM-SHA256:!DHE-RSA-AES256-GCM-SHA384:!DHE-RSA-AES128-SHA256:!DHE-RSA-AES256-SHA:!DHE-RSA-AES128-SHA:!DHE-RSA-AES256-SHA256:!DHE-RSA-CAMELLIA128-SHA:!DHE-RSA-CAMELLIA256-SHA:!DHE-RSA-3DES";
    # In the SSL-TLS negotiation process, the encryption algorithm set on the server takes precedence, and if it is off, the algorithm can be weakened and attacked.
    ssl_prefer_server_ciphers on;

    # proxy pass setting.
    # redirect to spring application server
    location / {
                            #proxy_redirect off;
                            proxy_buffering off;
                            #proxy_pass_header Server;
                            proxy_set_header Host $host;
                            proxy_set_header X-Real-IP $remote_addr;
                            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                            proxy_set_header X-Forwarded-Proto $scheme;

                            # Because docker is used, do not set proxy pass with localhost, but set proxy pass using private IP of ec2 instance
                            proxy_pass http://was;
                            # proxy http protocol version. 1.1 Recommended
                            proxy_http_version 1.1;
    }

}
